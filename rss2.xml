<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>로요그님의 블로그</title>
    <link>https://yeonggyulim.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 31 Mar 2020 04:53:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>React(리액트)란?</title>
      <link>https://yeonggyulim.github.io/2020/03/30/react/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%9E%80/</link>
      <guid>https://yeonggyulim.github.io/2020/03/30/react/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%9E%80/</guid>
      <pubDate>Mon, 30 Mar 2020 15:00:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;최근 들어 React로 프로젝트를 시작하는 곳도 많아지고 실제 업무에서 React를 도입하면서 React를 공부를 시작하였는데, 적으면서 공부하면 정리하기에도 좋고 복습하기에도 좋을 것 같아 블로그에 작성하기로 하였습니다. 이번 포스팅에서는 리액트를 소개하는 글을 적어보도록 하겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;1-React-리액트&quot;&gt;&lt;a href=&quot;#1-React-리액트&quot; class=&quot;headerlink&quot; title=&quot;1. React(리액트)&quot;&gt;&lt;/a&gt;1. React(리액트)&lt;/h2&gt;&lt;h3 id=&quot;React란&quot;&gt;&lt;a href=&quot;#React란&quot; class=&quot;headerlink&quot; title=&quot;React란?&quot;&gt;&lt;/a&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9rby53aWtpcGVkaWEub3JnL3dpa2kvJUVCJUE2JUFDJUVDJTk1JUExJUVEJThBJUI4XyglRUMlOUUlOTAlRUIlQjAlOTQlRUMlOEElQTQlRUQlODElQUMlRUIlQTYlQkQlRUQlOEElQjhfJUVCJTlEJUJDJUVDJTlEJUI0JUVCJUI4JThDJUVCJTlGJUFDJUVCJUE2JUFDKQ==&quot; title=&quot;https://ko.wikipedia.org/wiki/%EB%A6%AC%EC%95%A1%ED%8A%B8_(%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC)&quot;&gt;React란?&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;사용자 인터페이스(User Interface)를 만들기 위해 사용하는 자바스크립트 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;React는-뷰-계층&quot;&gt;&lt;a href=&quot;#React는-뷰-계층&quot; class=&quot;headerlink&quot; title=&quot;React는 뷰 계층&quot;&gt;&lt;/a&gt;React는 뷰 계층&lt;/h3&gt;&lt;p&gt;리액트는 일반적으로 애플리케이션의 뷰 계층으로 여겨집니다.&lt;br&gt;&lt;img src=&quot;/images/react/react.png&quot; alt=&quot;react&quot;&gt;&lt;br&gt;그림과 같이 데이터를 생성하는 애플리케이션 로직이 있고, 이 데이터를 UI 화면에 렌더링 하기 위해 리액트 컴포넌트에 보냅니다. 컴포넌트는 페이지의 HTML 코드를 얻는 작업을 합니다. &lt;/p&gt;
&lt;h3 id=&quot;React-구성&quot;&gt;&lt;a href=&quot;#React-구성&quot; class=&quot;headerlink&quot; title=&quot;React 구성&quot;&gt;&lt;/a&gt;React 구성&lt;/h3&gt;&lt;p&gt;리액트는 프로그래밍 할 때 사용하는 &lt;strong&gt;React Component&lt;/strong&gt;와 렌더링할 때 사용하는 &lt;strong&gt;React DOM&lt;/strong&gt; 으로 나뉩니다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>최근 들어 React로 프로젝트를 시작하는 곳도 많아지고 실제 업무에서 React를 도입하면서 React를 공부를 시작하였는데, 적으면서 공부하면 정리하기에도 좋고 복습하기에도 좋을 것 같아 블로그에 작성하기로 하였습니다. 이번 포스팅에서는 리액트를 소개하는 글을 적어보도록 하겠습니다.</p><h2 id="1-React-리액트"><a href="#1-React-리액트" class="headerlink" title="1. React(리액트)"></a>1. React(리액트)</h2><h3 id="React란"><a href="#React란" class="headerlink" title="React란?"></a><span class="exturl" data-url="aHR0cHM6Ly9rby53aWtpcGVkaWEub3JnL3dpa2kvJUVCJUE2JUFDJUVDJTk1JUExJUVEJThBJUI4XyglRUMlOUUlOTAlRUIlQjAlOTQlRUMlOEElQTQlRUQlODElQUMlRUIlQTYlQkQlRUQlOEElQjhfJUVCJTlEJUJDJUVDJTlEJUI0JUVCJUI4JThDJUVCJTlGJUFDJUVCJUE2JUFDKQ==" title="https://ko.wikipedia.org/wiki/%EB%A6%AC%EC%95%A1%ED%8A%B8_(%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8_%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC)">React란?<i class="fa fa-external-link"></i></span></h3><ul><li>사용자 인터페이스(User Interface)를 만들기 위해 사용하는 자바스크립트 라이브러리</li></ul><h3 id="React는-뷰-계층"><a href="#React는-뷰-계층" class="headerlink" title="React는 뷰 계층"></a>React는 뷰 계층</h3><p>리액트는 일반적으로 애플리케이션의 뷰 계층으로 여겨집니다.<br><img src="/images/react/react.png" alt="react"><br>그림과 같이 데이터를 생성하는 애플리케이션 로직이 있고, 이 데이터를 UI 화면에 렌더링 하기 위해 리액트 컴포넌트에 보냅니다. 컴포넌트는 페이지의 HTML 코드를 얻는 작업을 합니다. </p><h3 id="React-구성"><a href="#React-구성" class="headerlink" title="React 구성"></a>React 구성</h3><p>리액트는 프로그래밍 할 때 사용하는 <strong>React Component</strong>와 렌더링할 때 사용하는 <strong>React DOM</strong> 으로 나뉩니다.</p><a id="more"></a><p><img src="/images/react/react_component.png" alt="react_component"><br>리액트 컴포넌트에서 알아야할 내용은 다음과 같습니다.</p><ul><li>데이터: 컴포넌트가 렌더링되는 곳 어디든 있는 데이터(컴포넌트가 어디있든 상관없음)</li><li>생명주기: 컴포넌트 생명주기 내의 변화에 반응하도록 구현한 메서드</li><li>이벤트: 사용자와 상호 작용하기 위해 작성한 코드</li><li>JSX: UI 구조를 표현하기 위해 사용되는 리액트 컴포넌트의 문법</li></ul><h3 id="React의-추상화"><a href="#React의-추상화" class="headerlink" title="React의 추상화"></a>React의 추상화</h3><p>리액트는 여러 플랫폼에서 UI 구조를 구현하는데 사용할 수 있는 추상화 수준과 확장성을 가지고 있습니다.<br><img src="/images/react/react_abstraction.png" alt="react_abstraction"></p><h2 id="2-JSX란"><a href="#2-JSX란" class="headerlink" title="2. JSX란?"></a>2. <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmVhY3RfKHdlYl9mcmFtZXdvcmspI0pTWA==" title="https://en.wikipedia.org/wiki/React_(web_framework)#JSX">JSX란?<i class="fa fa-external-link"></i></span></h2><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><ul><li>Javscript XML의 줄임말로 Javscript 언어 문법의 확장판</li><li>외관이 HTML과 비슷하여 개발자들에게 친숙한 문법으로 컴포넌트 구조화 가능</li></ul><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nested-Elements"><a href="#Nested-Elements" class="headerlink" title="Nested Elements"></a>Nested Elements</h3><p>같은 레벨의 Multiple Elements는 <code>&lt;div&gt;</code> element와 같은 하나의 container element로 래핑해줘야합니다.</p><h3 id="Javscript-Expressions"><a href="#Javscript-Expressions" class="headerlink" title="Javscript Expressions"></a>Javscript Expressions</h3><p>Javascript <strong>expressions</strong> (but not <strong>statements</strong>)는 JSX안에 <code>{}</code>로 표현할 수 있습니다.</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Conditional-Statements"><a href="#Conditional-Statements" class="headerlink" title="Conditional Statements"></a>Conditional Statements</h3><p><strong>if-else statements</strong> 대신 <strong>conditional expressions(조건 연산자)</strong>로 대신할 수 있습니다.</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span> i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">'true'</span> <span class="token punctuation">:</span> <span class="token string">'false'</span> <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>함수</strong>와 <strong>JSX</strong>는 <strong>conditionals(조건문)</strong>에서 사용할 수 있습니다.</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sections <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>sections<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sections<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">/* 'key' is used by react to keep track of list items and their changes */</span>            <span class="token comment" spellcheck="true">/* Each 'key' must be unique */</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token string">"section-"</span> <span class="token operator">+</span> n<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Section <span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-참조"><a href="#3-참조" class="headerlink" title="3. 참조"></a>3. 참조</h2><ul><li>리액트&amp;리액트 네이티브 통합 교과서</li><li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUmVhY3RfKHdlYl9mcmFtZXdvcmspI0pTWA==" title="https://en.wikipedia.org/wiki/React_(web_framework)#JSX">위키피디아<i class="fa fa-external-link"></i></span></li></ul>]]></content:encoded>
      
      <comments>https://yeonggyulim.github.io/2020/03/30/react/React(%EB%A6%AC%EC%95%A1%ED%8A%B8)%EB%9E%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github Pages 블로그 만들기 with Hexo</title>
      <link>https://yeonggyulim.github.io/2020/03/30/github-pages-blog/hexo/Github-Pages-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-with-Hexo/</link>
      <guid>https://yeonggyulim.github.io/2020/03/30/github-pages-blog/hexo/Github-Pages-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-with-Hexo/</guid>
      <pubDate>Mon, 30 Mar 2020 08:26:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;회사에서 1년 정도 일하면서 공부는 간간이 했지만 기록하거나 프로젝트로 관리하지 않으니 공부하고 있는 게 눈에 보이지 않아 기록하고 정리할 수 있는 블로그를 다시 시작해보기로 했습니다. 이전에는 Jekyll을 이용하여 Github Pages에 블로그를 올렸었는데, 이번에는 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=&quot; title=&quot;https://theme-next.org/&quot;&gt;Hexo의 next 테마&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;를 이용하여 블로그를 만들어 보기로 하였습니다. 먼저 사용하려고 하는 기술들을 간단히 정리하고 만드는 과정을 적어보도록 하겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;1-기술-정리&quot;&gt;&lt;a href=&quot;#1-기술-정리&quot; class=&quot;headerlink&quot; title=&quot;1. 기술 정리&quot;&gt;&lt;/a&gt;1. 기술 정리&lt;/h2&gt;&lt;h3 id=&quot;Github-Pages&quot;&gt;&lt;a href=&quot;#Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;Github Pages&quot;&gt;&lt;/a&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9wYWdlcy5naXRodWIuY29tLw==&quot; title=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;깃헙 저장소에서 바로 웹사이트를 만들 수 있는 무료 호스팅 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oZXhvLmlvLw==&quot; title=&quot;https://hexo.io/&quot;&gt;Hexo&lt;i class=&quot;fa fa-external-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;빠르고, 간단하고 파워풀한 블로그 프레임워크&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-블로그-만들기&quot;&gt;&lt;a href=&quot;#2-블로그-만들기&quot; class=&quot;headerlink&quot; title=&quot;2. 블로그 만들기&quot;&gt;&lt;/a&gt;2. 블로그 만들기&lt;/h2&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>회사에서 1년 정도 일하면서 공부는 간간이 했지만 기록하거나 프로젝트로 관리하지 않으니 공부하고 있는 게 눈에 보이지 않아 기록하고 정리할 수 있는 블로그를 다시 시작해보기로 했습니다. 이전에는 Jekyll을 이용하여 Github Pages에 블로그를 올렸었는데, 이번에는 <span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=" title="https://theme-next.org/">Hexo의 next 테마<i class="fa fa-external-link"></i></span>를 이용하여 블로그를 만들어 보기로 하였습니다. 먼저 사용하려고 하는 기술들을 간단히 정리하고 만드는 과정을 적어보도록 하겠습니다.</p><h2 id="1-기술-정리"><a href="#1-기술-정리" class="headerlink" title="1. 기술 정리"></a>1. 기술 정리</h2><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a><span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29tLw==" title="https://pages.github.com/">Github Pages<i class="fa fa-external-link"></i></span></h3><ul><li>깃헙 저장소에서 바로 웹사이트를 만들 수 있는 무료 호스팅 서비스</li></ul><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==" title="https://hexo.io/">Hexo<i class="fa fa-external-link"></i></span></h3><ul><li>빠르고, 간단하고 파워풀한 블로그 프레임워크</li></ul><h2 id="2-블로그-만들기"><a href="#2-블로그-만들기" class="headerlink" title="2. 블로그 만들기"></a>2. 블로그 만들기</h2><a id="more"></a><h3 id="Hexo-Requirements"><a href="#Hexo-Requirements" class="headerlink" title="Hexo Requirements"></a>Hexo Requirements</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">Node.js 10 버전 이상 설치<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS8=" title="https://git-scm.com/">Git 설치<i class="fa fa-external-link"></i></span></li></ul><h3 id="Hexo-Cli-설치"><a href="#Hexo-Cli-설치" class="headerlink" title="Hexo Cli 설치"></a>Hexo Cli 설치</h3><p>글로벌로 설치하고 싶지 않은 사용자들은 npm으로 hexo만 설치하고, npx hexo 명령어를 사용하지만 편의상 hexo cli 사용</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Hexo-프로젝트-Setup"><a href="#Hexo-프로젝트-Setup" class="headerlink" title="Hexo 프로젝트 Setup"></a>Hexo 프로젝트 Setup</h3><pre><code>$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install</code></pre><p>설치하고 나면 다음과 같은 프로젝트 폴더 구조를 볼 수 있습니다.</p><pre><code>&lt;folder&gt;├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes    └── landscape</code></pre><h3 id="Theme-설치-및-사용"><a href="#Theme-설치-및-사용" class="headerlink" title="Theme 설치 및 사용"></a>Theme 설치 및 사용</h3><p>먼저 마음에 드는 테마를 <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=" title="https://hexo.io/themes/">Hexo 테마<i class="fa fa-external-link"></i></span>에서 고른 뒤 themes 폴더 안에 설치해 줍니다. 저는 <span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy8=" title="https://theme-next.org/">Next Theme<i class="fa fa-external-link"></i></span>를 사용하기로 하였습니다. Theme에 새로운 기능이 생길 때마다 기능을 바로바로 pull 받아 사용하려면 git clone으로 설치한 뒤 2개의 프로젝트(개인 Hexo 블로그 프로젝트, 테마 프로젝트)를 관리해 주어야 하지만 저는 편의상 released된 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L3JlbGVhc2VzL3RhZy92Ny43LjI=" title="https://github.com/theme-next/hexo-theme-next/releases/tag/v7.7.2">v7.7.2 버전<i class="fa fa-external-link"></i></span>을 다운로드해 사용하기로 하였습니다.</p><p>zip 파일을 받아 themes 폴더 안에 넣어주고, <folder>의 _config.yml 파일에 theme을 <code>landscape</code>에서 <code>next</code>로 바꿔주었습니다.<br><img src="/images/github-pages-blog/hexo/config_theme.png" alt="config_theme"></p><h3 id="Github-프로젝트-생성"><a href="#Github-프로젝트-생성" class="headerlink" title="Github 프로젝트 생성"></a>Github 프로젝트 생성</h3><p>메인 웹사이트로 사용하기 위해 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3llb25nZ3l1bGltL3llb25nZ3l1bGltLmdpdGh1Yi5pbw==" title="https://github.com/yeonggyulim/yeonggyulim.github.io">{username}.github.io<i class="fa fa-external-link"></i></span> 명의 프로젝트 생성<br><img src="/images/github-pages-blog/hexo/github_project_init.png" alt="github_project_init"></p><h3 id="Github-Repository에-Hexo-프로젝트-올리기"><a href="#Github-Repository에-Hexo-프로젝트-올리기" class="headerlink" title="Github Repository에 Hexo 프로젝트 올리기"></a>Github Repository에 Hexo 프로젝트 올리기</h3><p>프로젝트의 최상위 디렉토리에서 해당 명령어 입력</p><pre><code>$ git init$ git add .$ git commit -m &#39;hexo blog first commit&#39;$ git remote add origin https://github.com/{username}/{username}.github.io.git$ git push -u origin master</code></pre><h3 id="생성한-Hexo-프로젝트-테스트"><a href="#생성한-Hexo-프로젝트-테스트" class="headerlink" title="생성한 Hexo 프로젝트 테스트"></a>생성한 Hexo 프로젝트 테스트</h3><p>프로젝트의 최상위 디렉토리에서 해당 명령어 입력</p><pre><code>$ hexo server</code></pre><p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==" title="http://localhost:4000/">로컬호스트<i class="fa fa-external-link"></i></span>로 접속하면 생성한 블로그를 로컬 환경에서 확인할 수 있습니다.</p><p>다음 포스트에서는 <span class="exturl" data-url="aHR0cHM6Ly90cmF2aXMtY2kuY29tLw==" title="https://travis-ci.com/">Travis CI<i class="fa fa-external-link"></i></span>를 이용하여 자동 배포하는 과정을 다루어보도록 하겠습니다.</p>]]></content:encoded>
      
      <comments>https://yeonggyulim.github.io/2020/03/30/github-pages-blog/hexo/Github-Pages-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-with-Hexo/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
